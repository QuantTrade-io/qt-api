"""
Django settings for qt project.

Generated by 'django-admin startproject' using Django 4.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

import os
from datetime import datetime, timedelta
from celery.schedules import crontab

from django.utils.translation import gettext_lazy as _

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure--5adrjk2^%7pc9%_*78nzns!nbgs_p0xrn)m-p=8b1ei)p3+)7"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG", True)

ALLOWED_HOSTS = []

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Application definition

INSTALLED_APPS = [
    # Daphe, needs to be on top
    "daphne",
    # Built-in
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # 3th party
    "channels",
    "channels_auth_token_middlewares",
    "corsheaders",
    "django_celery_results",
    "djstripe",
    "encrypted_model_fields",
    "modeltranslation",
    "ordered_model",
    "rest_framework",
    "rest_framework_api_key",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "storages",
    # local
    "qt_auth",
    "qt_billing",
    "qt_brokers",
    "qt_security",
    "qt_utils",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.locale.LocaleMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "qt.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]


# WSGI && ASGI

WSGI_APPLICATION = "qt.wsgi.application"
ASGI_APPLICATION = 'qt.asgi.application'


# Websocket Channel layer

REDIS_URL = os.getenv('REDIS_URL', 'redis://localhost:6379')

REDIS_KEY_CURRENT_STOCK_SUFFIXES = "current_stock_suffixes"

REDIS_KEY_FINNHUB_WEBSOCKET_RECEIVER_LOCK = "finnhub_websocket_receiver_lock"
REDIS_KEY_FINNHUB_WEBSOCKET_RECEIVER_TASK_ID = "finnhub_websocket_receiver_task_id"
REDIS_KEY_FINNHUB_WEBSOCKET_RECEIVER_HEARTBEAT = "finnhub_websocket_receiver_heartbeat"

REDIS_KEY_FINNHUB_WEBSOCKET_DISTRIBUTOR_TASK_ID = "finnhub_websocket_receiver_task_id"
REDIS_KEY_FINNHUB_WEBSOCKET_DISTRIBUTOR_HEARTBEAT = "finnhub_websocket_receiver_heartbeat"

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [REDIS_URL],
        },
    },
}


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

MODELTRANSLATION_FALLBACK_LANGUAGES = ("en",)

TIME_ZONE = "Europe/Amsterdam"

USE_I18N = True

USE_L10N = True

USE_TZ = True

LOCALE_PATHS = (os.path.join(BASE_DIR, "locale/"),)

LANGUAGES = (
    ("en", _("English")),
    ("nl", _("Dutch")),
)

LANGUAGE_CODE = "en"


# Celery settings

CELERY_BROKER_URL = REDIS_URL
CELERY_RESULT_BACKEND = 'django-db'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = TIME_ZONE

DEFAULT_QUEUE = "default_queue"
CELERY_QUEUE_FINNHUB_RECEIVER = "celery_queue_finnhub"
CELERY_QUEUE_FINNHUB_DISTRIBUTOR = "celery_queue_finnhub_distributor"

CELERY_ROUTES = {
    'core.tasks.default': {'queue': DEFAULT_QUEUE},
    'core.tasks.finnhub_receiver': {'queue': CELERY_QUEUE_FINNHUB_RECEIVER},
    'core.tasks.finnhub_distributor': {'queue': CELERY_QUEUE_FINNHUB_DISTRIBUTOR},
}

# Set the time for one-time execution (e.g., 1 minutes from now)
run_at_time = datetime.now() + timedelta(seconds=20)

CELERY_BEAT_SCHEDULE = {
    "start-manage-stock-suffixes-subscriptions": {
        "task": "manage_stock_suffix_subscriptions",
        "schedule": crontab(minute='*/1'),
    },
}


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql_psycopg2",
        "NAME": os.environ.get("POSTGRES_NAME"),
        "USER": os.environ.get("POSTGRES_USER"),
        "PASSWORD": os.environ.get("POSTGRES_PASSWORD"),
        "HOST": os.environ.get("POSTGRES_HOST"),
        "PORT": os.environ.get("POSTGRES_PORT"),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation."
        "UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


AUTH_USER_MODEL = "qt_auth.User"

# REST Framework config

REST_FRAMEWORK = {
    "DEFAULT_PARSER_CLASSES": (
        "rest_framework.parsers.MultiPartParser",
        "rest_framework.parsers.FormParser",
        "rest_framework.parsers.JSONParser",
    ),
    "DEFAULT_RENDERER_CLASSES": ("rest_framework.renderers.JSONRenderer",),
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
    ),
    # https://www.django-rest-framework.org/api-guide/pagination/#cursorpagination
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.CursorPagination",
    "PAGE_SIZE": 25,
}

JWT_ALGORITHM = os.environ.get("JWT_ALGORITHM", "HS256")

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    "ROTATE_REFRESH_TOKENS": False,
    "BLACKLIST_AFTER_ROTATION": False,
    "ALGORITHM": JWT_ALGORITHM,
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

WWW_URL = os.environ.get("WWW_URL", "http://localhost:3000")
API_URL = os.environ.get("API_URL", "http://localhost:8000")

# ENCRYPTION KEY
FIELD_ENCRYPTION_KEY = os.environ.get("FIELD_ENCRYPTION_KEY")


# Stripe Settings
STRIPE_LIVE_MODE = os.environ.get("STRIPE_LIVE_MODE", False)
STRIPE_UNSUBSCRIBED_CUSTOMER_ID = "cus_OFq11TMLMTnOXb"
STRIPE_SUBSCRIBED_CUSTOMER_ID = "cus_OFq1zwV2u7V3xu"
STRIPE_SUBSCRIPTION_ITEM_ID = "sub_1NTMBNHPjqvUQHRQummpAYuH"
DJSTRIPE_WEBHOOK_SECRET = os.environ.get("DJSTRIPE_WEBHOOK_SECRET")
DJSTRIPE_USE_NATIVE_JSONFIELD = True
DJSTRIPE_FOREIGN_KEY_TO_FIELD = "id"


# AWS Config
AWS_DEFAULT_REGION = os.environ.get("AWS_DEFAULT_REGION")
AWS_ACCESS_KEY_ID = os.environ.get("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.environ.get("AWS_SECRET_ACCESS_KEY")

AWS_S3_PUBLIC_ASSETS = os.environ.get("AWS_S3_PUBLIC_ASSETS")
AWS_S3_PRIVATE_ASSETS = os.environ.get("AWS_S3_PRIVATE_ASSETS")

AWS_S3_ACCESS_KEY_ID = os.environ.get("AWS_S3_ACCESS_KEY_ID")
AWS_S3_SECRET_ACCESS_KEY = os.environ.get("AWS_S3_SECRET_ACCESS_KEY")


# Finnhub
FINNHUB_API_KEY = os.environ.get("FINNHUB_API_KEY")


# Email Config
EMAIL_BACKEND = "django_ses.SESBackend"
AWS_SES_REGION_NAME = os.environ.get("AWS_SES_REGION_NAME")
AWS_SES_REGION_ENDPOINT = os.environ.get("AWS_SES_REGION_ENDPOINT")


NO_REPLY_EMAIL_ADDRESS = os.environ.get("SERVICE_EMAIL_ADDRESS")

# Geolocation API
GEOLOCATION_API_KEY = os.environ.get("GEOLOCATION_API_KEY")


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = "/static/"

MEDIA_ROOT = os.environ.get("MEDIA_ROOT", "./media")

MEDIA_URL = os.environ.get("MEDIA_URL", "/media/")

STATICFILES_DIRS = (os.path.join(BASE_DIR, "qt/static"),)

STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

NAME_MAX_LENGTH = 64
PASSWORD_MIN_LENGTH = 10
PASSWORD_MAX_LENGTH = 100

MAXIMUM_FILE_SIZE = 10240000  # 10MB
SUPPORTED_MEDIA_MIMETYPES = ["image/gif", "image/jpeg", "image/png"]settings
